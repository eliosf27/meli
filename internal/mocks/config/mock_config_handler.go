// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/config/config_handler.go

// Package mock_config is a generated GoMock package.
package config

import (
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
	reflect "reflect"
)

// MockConfigCacheHandler is a mock of ConfigCacheHandler interface
type MockConfigCacheHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConfigCacheHandlerMockRecorder
}

// MockConfigCacheHandlerMockRecorder is the mock recorder for MockConfigCacheHandler
type MockConfigCacheHandlerMockRecorder struct {
	mock *MockConfigCacheHandler
}

// NewMockConfigCacheHandler creates a new mock instance
func NewMockConfigCacheHandler(ctrl *gomock.Controller) *MockConfigCacheHandler {
	mock := &MockConfigCacheHandler{ctrl: ctrl}
	mock.recorder = &MockConfigCacheHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigCacheHandler) EXPECT() *MockConfigCacheHandlerMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockConfigCacheHandler) Fetch(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fetch indicates an expected call of Fetch
func (mr *MockConfigCacheHandlerMockRecorder) Fetch(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockConfigCacheHandler)(nil).Fetch), c)
}

// Update mocks base method
func (m *MockConfigCacheHandler) Update(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockConfigCacheHandlerMockRecorder) Update(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConfigCacheHandler)(nil).Update), ctx)
}
