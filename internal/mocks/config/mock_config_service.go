// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/config/config_service.go

// Package mock_config is a generated GoMock package.
package config

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfigServicer is a mock of ConfigServicer interface
type MockConfigServicer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServicerMockRecorder
}

// MockConfigServicerMockRecorder is the mock recorder for MockConfigServicer
type MockConfigServicerMockRecorder struct {
	mock *MockConfigServicer
}

// NewMockConfigServicer creates a new mock instance
func NewMockConfigServicer(ctrl *gomock.Controller) *MockConfigServicer {
	mock := &MockConfigServicer{ctrl: ctrl}
	mock.recorder = &MockConfigServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigServicer) EXPECT() *MockConfigServicerMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockConfigServicer) Fetch() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockConfigServicerMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockConfigServicer)(nil).Fetch))
}

// Update mocks base method
func (m *MockConfigServicer) Update(storage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", storage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockConfigServicerMockRecorder) Update(storage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConfigServicer)(nil).Update), storage)
}
