// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/item/item_cache.go

// Package mock_item is a generated GoMock package.
package mock_item

import (
	gomock "github.com/golang/mock/gomock"
	entities "meli/internal/entities"
	reflect "reflect"
)

// MockItemCacher is a mock of ItemCacher interface
type MockItemCacher struct {
	ctrl     *gomock.Controller
	recorder *MockItemCacherMockRecorder
}

// MockItemCacherMockRecorder is the mock recorder for MockItemCacher
type MockItemCacherMockRecorder struct {
	mock *MockItemCacher
}

// NewMockItemCacher creates a new mock instance
func NewMockItemCacher(ctrl *gomock.Controller) *MockItemCacher {
	mock := &MockItemCacher{ctrl: ctrl}
	mock.recorder = &MockItemCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItemCacher) EXPECT() *MockItemCacherMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockItemCacher) Get(Id string) (entities.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", Id)
	ret0, _ := ret[0].(entities.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockItemCacherMockRecorder) Get(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItemCacher)(nil).Get), Id)
}

// Save mocks base method
func (m *MockItemCacher) Save(item entities.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockItemCacherMockRecorder) Save(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockItemCacher)(nil).Save), item)
}

// MustApply mocks base method
func (m *MockItemCacher) MustApply(strategy string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustApply", strategy)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MustApply indicates an expected call of MustApply
func (mr *MockItemCacherMockRecorder) MustApply(strategy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustApply", reflect.TypeOf((*MockItemCacher)(nil).MustApply), strategy)
}
