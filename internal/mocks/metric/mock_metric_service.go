// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/metric/metric_service.go

// Package mock_metric is a generated GoMock package.
package metric

import (
	gomock "github.com/golang/mock/gomock"
	entities "meli/internal/entities"
	reflect "reflect"
)

// MockMetricService is a mock of MetricService interface
type MockMetricService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceMockRecorder
}

// MockMetricServiceMockRecorder is the mock recorder for MockMetricService
type MockMetricServiceMockRecorder struct {
	mock *MockMetricService
}

// NewMockMetricService creates a new mock instance
func NewMockMetricService(ctrl *gomock.Controller) *MockMetricService {
	mock := &MockMetricService{ctrl: ctrl}
	mock.recorder = &MockMetricServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricService) EXPECT() *MockMetricServiceMockRecorder {
	return m.recorder
}

// UpdateMetric mocks base method
func (m *MockMetricService) UpdateMetric(item entities.ItemMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetric indicates an expected call of UpdateMetric
func (mr *MockMetricServiceMockRecorder) UpdateMetric(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricService)(nil).UpdateMetric), item)
}

// FetchMetrics mocks base method
func (m *MockMetricService) FetchMetrics() []entities.ItemMetricResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchMetrics")
	ret0, _ := ret[0].([]entities.ItemMetricResponse)
	return ret0
}

// FetchMetrics indicates an expected call of FetchMetrics
func (mr *MockMetricServiceMockRecorder) FetchMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchMetrics", reflect.TypeOf((*MockMetricService)(nil).FetchMetrics))
}
